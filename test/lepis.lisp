(in-package :lepis.test)

(def-suite lepis :in all)

(in-suite lepis)

(defstruct foo
  a b)

(def-test basic ()
  (with-db  (db "/tmp/lepis/")
    (clear-db db)
    (! db :foo 1)
    (is (= 1 (@ db :foo)))
    (! db "hello" "world")
    (is (string= "world" (@ db "hello")))
    (! db :foo1 (make-foo :a 1 :b 'xxx))
    (is (equalp (make-foo :a 1 :b 'xxx) (@ db :foo1))))
  (with-db (db "/tmp/lepis/")
    (is (= 1 (@ db :foo)))
    (is (string= "world" (@ db "hello")))
    (is (equalp (make-foo :a 1 :b 'xxx) (@ db :foo1)))))

(def-test inc-thread ()
  (with-db (db "/tmp/lepis/")
    (clear-db db)
    (mapc #'sb-thread:join-thread
          (loop repeat 10
                collect (sb-thread:make-thread
                         (lambda ()
                           (loop repeat 1000
                                 do (inc db :inc))))))
    (is (= 10000 (@ db :inc)))))

(def-test hash-basic ()
  (with-db (db "/tmp/lepis/")
    (clear-db db)
    (hset db :hash 'a 1 'b 2 'c 3)
    (is (= 2 (hget db :hash 'b)))
    (let ((h (hget db :hash 'b 'c)))
      (is (= 2 (hash-table-count h)))
      (is (= 2 (gethash 'b h)))
      (is (= 3 (gethash 'c h))))
    (is (= 1 (hdel db :hash 'b 'd)))
    (let ((h (hget db :hash)))
      (is (= 2 (hash-table-count h)))
      (is (= 1 (gethash 'a h)))
      (is (= 3 (gethash 'c h))))))

(def-test zset-basic ()
  (with-db (db "/tmp/lepis/")
    (clear-db db)
    (is (= 3 (zadd db :zset 1 'foo 2 'bar 30 'baz)))
    (is (= 3 (zcard db :zset)))
    (is (= 0 (zrank db :zset 'foo)))
    (is (= 1 (zrank db :zset 'bar)))
    (is (= 2 (zrank db :zset 'baz)))
    (is (= 1 (zadd db :zset 3 'baz 4 'foz)))
    (is (= 4 (zcard db :zset)))
    (is (equal '(foo bar baz foz) (zrang db :zset 0 nil)))
    (is (equal '((bar . 2) (baz . 3)) (zrang db :zset 1 2 :with-scores t)))
    (is (equal '(bar baz) (zrang-by-score db :zset 2 3)))
    (is (equal '((bar . 2) (baz . 3))
               (zrang-by-score db :zset most-negative-double-float most-positive-double-float
                               :with-scores t :offset 1 :limit 2)))
    (is (= 2 (zrem db :zset 'bar 'foz)))
    (is (equal '(foo baz) (zrang db :zset 0 nil)))))

(def-test zset-struct ()
  (with-db (db "/tmp/lepis/")
    (clear-db db)
    (let ((a (make-foo :a 1))
          (b (make-foo :a 1))
          (c (make-foo :a 2)))
      (is (= 2 (zadd db :zset 1 a 2 b 3 c)))
      (is (equalp `((,a . 2) (,c . 3)) (zrang db :zset 0 nil :with-scores t)))
      (is (= 0 (zadd db :zset 20 a)))
      (is (equalp `((,c . 3) (,a . 20)) (zrang db :zset 0 nil :with-scores t))))))

(def-test set-basic ()
  (with-db (db "/tmp/lepis/")
    (clear-db db)
    (is (= 1 (sadd db :set "a")))
    (is (= 2 (sadd db :set "a" "b" "c")))
    (is (= 3 (scard db :set)))
    (is (= 1 (srem db :set "b" "d")))
    (is (= 2 (scard db :set)))
    (is (= 2 (sadd db :set2 "c" "d")))
    (is (equal '("a") (sdiff db :set :set2)))
    (is (equal '("c") (sinter db :set :set2)))
    (is (equal '("a" "c" "d") (sunion db :set :set2)))))

(def-test dump-object-identity ()
  (with-db (db "/tmp/lepis/")
    (clear-db db)
    (let ((foo (make-foo))
          (list (list 1)))
      (! db :list1 list)
      (! db :foo1 foo)
      (! db :list2 list)
      (! db :foo2 foo)
      (zadd db :zset 1 list 2 foo)
      (sadd db :set foo list)))
  (with-db (db "/tmp/lepis/")
    (let ((list (@ db :list1))
          (foo (@ db :foo1)))
      (@ db :list1 list)
      (is (equalp (make-foo) foo))
      (is (eq list (@ db :list2)))
      (is (eq foo (@ db :foo2)))
      (let ((xs (zrang db :zset 0 nil)))
        (is (eq list (car xs)))
        (is (eq foo (cadr xs))))
      (let ((xs (smembers db :set)))
        (is (or (eq list (car xs)) (eq list (cadr xs))))
        (is (or (eq foo (car xs)) (eq foo (cadr xs))))))))

(def-test open-by-many-threads ()
  (with-db (db "/tmp/lepis/")
    (clear-db db))
  (mapc #'sb-thread:join-thread
        (loop for i below 10
              collect (sb-thread:make-thread
                       (lambda ()
                         (loop for i below 100 do
                           (with-db (db "/tmp/lepis/")
                             (inc db :foo)))))))
  (with-db (db "/tmp/lepis/")
    (is (= 1000 (@ db :foo)))))

(debug!)
